Steps:
Found mgj7_2 in the eax register at breakpoint ---
Potentially has "mgj7_2" in it somewhere
Tried mgj7_2 as the passphrase, no luck.
repnz scas %es:(%edi),%al is potentially just getting string length, meaning whatever happens needs to know how long it is.
Used the test phrase testabc
Continued to breakpoint 0x080485c7:
# ##########
# Console output starts here
Breakpoint 5, 0x080485c7 in main ()
(gdb) x/s (char *)$eax
0xffffd837:  "mgj7_2"
(gdb) x/s (char *)$ebx
0xffffd540:  "testabc_2"
(gdb)
# End console output
# ##########

This means that perhaps mgj7_2 is the passphrase that it checks to see for matching purposes, but that it gets mutated first. aka testabc became testabc_2
Checked to see if this was the case:
# ##########
# Console output starts here
(45) thot $ ./mgj7_2
testabc_2
Sorry! Not correct!
(46) thot $ ./mgj7_2
mgj7
Congratulations!
Unlocked with passphrase mgj7
(47) thot $
# End console output
# ##########

# ##################################################
# Full console output

(35) thot $ gdb mgj7_2
GNU gdb Red Hat Linux (6.3.0.0-1.162.el4rh)
Copyright 2004 Free Software Foundation, Inc.
GDB is free software, covered by the GNU General Public License, and you are
welcome to change it and/or distribute copies of it under certain conditions.
Type "show copying" to see the conditions.
There is absolutely no warranty for GDB.  Type "show warranty" for details.
This GDB was configured as "x86_64-redhat-linux-gnu"...(no debugging symbols found)
Using host libthread_db library "/lib64/tls/libthread_db.so.1".

(gdb) b main
Breakpoint 1 at 0x804851a
(gdb) r
Starting program: /u/SysLab/mgj7/mgj7_2
Reading symbols from shared object read from target memory...(no debugging symbols found)...done.
Loaded system supplied DSO at 0xffffe000
(no debugging symbols found)
(no debugging symbols found)

Breakpoint 1, 0x0804851a in main ()
(gdb) disas
Dump of assembler code for function main:
0x08048514 <main+0>: push   %ebp
0x08048515 <main+1>: mov    %esp,%ebp
0x08048517 <main+3>: push   %edi
0x08048518 <main+4>: push   %esi
0x08048519 <main+5>: push   %ebx
0x0804851a <main+6>: sub    $0x11c,%esp
0x08048520 <main+12>: and    $0xfffffff0,%esp
0x08048523 <main+15>: sub    $0x10,%esp
0x08048526 <main+18>: mov    0x80486ec,%eax
0x0804852b <main+23>: mov    %eax,0xffffffd8(%ebp)
0x0804852e <main+26>: mov    0x80486f0,%eax
0x08048533 <main+31>: mov    %eax,0xffffffdc(%ebp)
0x08048536 <main+34>: movzwl 0x80486f4,%eax
0x0804853d <main+41>: mov    %ax,0xffffffe0(%ebp)
0x08048541 <main+45>: movzbl 0x80486f6,%eax
0x08048548 <main+52>: mov    %al,0xffffffe2(%ebp)
0x0804854b <main+55>: movl   $0x2f,0x4(%esp)
0x08048553 <main+63>: mov    0xc(%ebp),%eax
0x08048556 <main+66>: mov    (%eax),%eax
0x08048558 <main+68>: mov    %eax,(%esp)
0x0804855b <main+71>: call   0x80484cc <r>
0x08048560 <main+76>: mov    %eax,0xfffffef4(%ebp)
0x08048566 <main+82>: mov    0x8049850,%eax
0x0804856b <main+87>: mov    %eax,0x8(%esp)
0x0804856f <main+91>: movl   $0x64,0x4(%esp)
0x08048577 <main+99>: lea    0xffffff68(%ebp),%esi
0x0804857d <main+105>: mov    %esi,(%esp)
0x08048580 <main+108>: call   0x8048378
0x08048585 <main+113>: mov    %esi,(%esp)
0x08048588 <main+116>: call   0x8048490 <c>
0x0804858d <main+121>: mov    %esi,0x4(%esp)
0x08048591 <main+125>: lea    0xfffffef8(%ebp),%ebx
0x08048597 <main+131>: mov    %ebx,(%esp)
0x0804859a <main+134>: call   0x80483a8
0x0804859f <main+139>: mov    %ebx,%edi
0x080485a1 <main+141>: cld
0x080485a2 <main+142>: mov    $0xffffffff,%ecx
0x080485a7 <main+147>: mov    $0x0,%eax
0x080485ac <main+152>: repnz scas %es:(%edi),%al
0x080485ae <main+154>: not    %ecx
0x080485b0 <main+156>: dec    %ecx
0x080485b1 <main+157>: movw   $0x325f,(%ebx,%ecx,1)
0x080485b7 <main+163>: movb   $0x0,0x2(%ebx,%ecx,1)
0x080485bc <main+168>: mov    0xfffffef4(%ebp),%eax
0x080485c2 <main+174>: inc    %eax
0x080485c3 <main+175>: mov    %eax,0x4(%esp)
0x080485c7 <main+179>: mov    %ebx,(%esp)
0x080485ca <main+182>: call   0x8048358
0x080485cf <main+187>: test   %eax,%eax
0x080485d1 <main+189>: jne    0x80485e5 <main+209>
0x080485d3 <main+191>: mov    %esi,0x4(%esp)
0x080485d7 <main+195>: movl   $0x804870c,(%esp)
0x080485de <main+202>: call   0x8048398
0x080485e3 <main+207>: jmp    0x80485f1 <main+221>
0x080485e5 <main+209>: movl   $0x80486f7,(%esp)
0x080485ec <main+216>: call   0x8048368
0x080485f1 <main+221>: lea    0xfffffff4(%ebp),%esp
0x080485f4 <main+224>: pop    %ebx
0x080485f5 <main+225>: pop    %esi
0x080485f6 <main+226>: pop    %edi
0x080485f7 <main+227>: leave
0x080485f8 <main+228>: ret
0x080485f9 <main+229>: nop
0x080485fa <main+230>: nop
0x080485fb <main+231>: nop
End of assembler dump.
(gdb) b *0x080485a7
Breakpoint 2 at 0x80485a7
(gdb) c
Continuing.
testabc

Breakpoint 2, 0x080485a7 in main ()
(gdb) x/s $eax
0xffffd540:  <Address 0xffffd540 out of bounds>
(gdb) x/s (char *)$eax
0xffffd540:  "testabc"
(gdb) b *0x080485bc
Breakpoint 3 at 0x80485bc
(gdb) c
Continuing.

Breakpoint 3, 0x080485bc in main ()
(gdb) x/s (char *)$eax
0x0:  <Address 0x0 out of bounds>
(gdb) x/s $eax
0x0:  <Address 0x0 out of bounds>
(gdb) b *0x080485c3
Breakpoint 4 at 0x80485c3
(gdb) c
Continuing.

Breakpoint 4, 0x080485c3 in main ()
(gdb) x/s $eax
0xffffd837:  <Address 0xffffd837 out of bounds>
(gdb) x/s (char *)$eax
0xffffd837:  "mgj7_2"


+++++
+++++
+++++
+++++
+++++

0x08048558 <main+68>: mov    %eax,(%esp)
0x0804855b <main+71>: call   0x80484cc <r>
0x08048560 <main+76>: mov    %eax,0xfffffef4(%ebp)
0x08048566 <main+82>: mov    0x8049850,%eax
0x0804856b <main+87>: mov    %eax,0x8(%esp)
0x0804856f <main+91>: movl   $0x64,0x4(%esp)
0x08048577 <main+99>: lea    0xffffff68(%ebp),%esi
0x0804857d <main+105>: mov    %esi,(%esp)
0x08048580 <main+108>: call   0x8048378
0x08048585 <main+113>: mov    %esi,(%esp)
0x08048588 <main+116>: call   0x8048490 <c>
0x0804858d <main+121>: mov    %esi,0x4(%esp)
0x08048591 <main+125>: lea    0xfffffef8(%ebp),%ebx
0x08048597 <main+131>: mov    %ebx,(%esp)
0x0804859a <main+134>: call   0x80483a8
0x0804859f <main+139>: mov    %ebx,%edi
0x080485a1 <main+141>: cld
0x080485a2 <main+142>: mov    $0xffffffff,%ecx
0x080485a7 <main+147>: mov    $0x0,%eax
0x080485ac <main+152>: repnz scas %es:(%edi),%al
0x080485ae <main+154>: not    %ecx
0x080485b0 <main+156>: dec    %ecx
0x080485b1 <main+157>: movw   $0x325f,(%ebx,%ecx,1)
0x080485b7 <main+163>: movb   $0x0,0x2(%ebx,%ecx,1)
0x080485bc <main+168>: mov    0xfffffef4(%ebp),%eax
0x080485c2 <main+174>: inc    %eax
0x080485c3 <main+175>: mov    %eax,0x4(%esp)
0x080485c7 <main+179>: mov    %ebx,(%esp)
0x080485ca <main+182>: call   0x8048358
0x080485cf <main+187>: test   %eax,%eax
0x080485d1 <main+189>: jne    0x80485e5 <main+209>
0x080485d3 <main+191>: mov    %esi,0x4(%esp)
0x080485d7 <main+195>: movl   $0x804870c,(%esp)
0x080485de <main+202>: call   0x8048398
0x080485e3 <main+207>: jmp    0x80485f1 <main+221>
0x080485e5 <main+209>: movl   $0x80486f7,(%esp)
0x080485ec <main+216>: call   0x8048368
0x080485f1 <main+221>: lea    0xfffffff4(%ebp),%esp
0x080485f4 <main+224>: pop    %ebx
0x080485f5 <main+225>: pop    %esi
0x080485f6 <main+226>: pop    %edi
0x080485f7 <main+227>: leave
0x080485f8 <main+228>: ret
0x080485f9 <main+229>: nop
0x080485fa <main+230>: nop
0x080485fb <main+231>: nop
End of assembler dump.
(gdb) b *0x080485a7
Breakpoint 2 at 0x80485a7
(gdb) c
Continuing.
testabc

Breakpoint 2, 0x080485a7 in main ()
(gdb) x/s $eax
0xffffd540:  <Address 0xffffd540 out of bounds>
(gdb) x/s (char *)$eax
0xffffd540:  "testabc"
(gdb) b *0x080485bc
Breakpoint 3 at 0x80485bc
(gdb) c
Continuing.

Breakpoint 3, 0x080485bc in main ()
(gdb) x/s (char *)$eax
0x0:  <Address 0x0 out of bounds>
(gdb) x/s $eax
0x0:  <Address 0x0 out of bounds>
(gdb) b *0x080485c3
Breakpoint 4 at 0x80485c3
(gdb) c
Continuing.

Breakpoint 4, 0x080485c3 in main ()
(gdb) x/s $eax
0xffffd837:  <Address 0xffffd837 out of bounds>
(gdb) x/s (char *)$eax
0xffffd837:  "mgj7_2"
(gdb)
[2]+  Stopped                 gdb mgj7_2
(36) thot $ fg 2
gdb mgj7_2

[2]+  Stopped                 gdb mgj7_2
(37) thot $ ./mgj7_2
mgj7_2
Sorry! Not correct!
(38) thot $ fg 2
gdb mgj7_2
x/s (char *)$eax
0xffffd837:  "mgj7_2"
(gdb) disas
Dump of assembler code for function main:
0x08048514 <main+0>: push   %ebp
0x08048515 <main+1>: mov    %esp,%ebp
0x08048517 <main+3>: push   %edi
0x08048518 <main+4>: push   %esi
0x08048519 <main+5>: push   %ebx
0x0804851a <main+6>: sub    $0x11c,%esp
0x08048520 <main+12>: and    $0xfffffff0,%esp
0x08048523 <main+15>: sub    $0x10,%esp
0x08048526 <main+18>: mov    0x80486ec,%eax
0x0804852b <main+23>: mov    %eax,0xffffffd8(%ebp)
0x0804852e <main+26>: mov    0x80486f0,%eax
0x08048533 <main+31>: mov    %eax,0xffffffdc(%ebp)
0x08048536 <main+34>: movzwl 0x80486f4,%eax
0x0804853d <main+41>: mov    %ax,0xffffffe0(%ebp)
0x08048541 <main+45>: movzbl 0x80486f6,%eax
0x08048548 <main+52>: mov    %al,0xffffffe2(%ebp)
0x0804854b <main+55>: movl   $0x2f,0x4(%esp)
0x08048553 <main+63>: mov    0xc(%ebp),%eax
0x08048556 <main+66>: mov    (%eax),%eax
0x08048558 <main+68>: mov    %eax,(%esp)
0x0804855b <main+71>: call   0x80484cc <r>
0x08048560 <main+76>: mov    %eax,0xfffffef4(%ebp)
0x08048566 <main+82>: mov    0x8049850,%eax
0x0804856b <main+87>: mov    %eax,0x8(%esp)
0x0804856f <main+91>: movl   $0x64,0x4(%esp)
0x08048577 <main+99>: lea    0xffffff68(%ebp),%esi
0x0804857d <main+105>: mov    %esi,(%esp)
0x08048580 <main+108>: call   0x8048378
0x08048585 <main+113>: mov    %esi,(%esp)
0x08048588 <main+116>: call   0x8048490 <c>
0x0804858d <main+121>: mov    %esi,0x4(%esp)
0x08048591 <main+125>: lea    0xfffffef8(%ebp),%ebx
0x08048597 <main+131>: mov    %ebx,(%esp)
0x0804859a <main+134>: call   0x80483a8
0x0804859f <main+139>: mov    %ebx,%edi
0x080485a1 <main+141>: cld
0x080485a2 <main+142>: mov    $0xffffffff,%ecx
0x080485a7 <main+147>: mov    $0x0,%eax
0x080485ac <main+152>: repnz scas %es:(%edi),%al
0x080485ae <main+154>: not    %ecx
0x080485b0 <main+156>: dec    %ecx
0x080485b1 <main+157>: movw   $0x325f,(%ebx,%ecx,1)
0x080485b7 <main+163>: movb   $0x0,0x2(%ebx,%ecx,1)
0x080485bc <main+168>: mov    0xfffffef4(%ebp),%eax
0x080485c2 <main+174>: inc    %eax
0x080485c3 <main+175>: mov    %eax,0x4(%esp)
0x080485c7 <main+179>: mov    %ebx,(%esp)
0x080485ca <main+182>: call   0x8048358
0x080485cf <main+187>: test   %eax,%eax
0x080485d1 <main+189>: jne    0x80485e5 <main+209>
0x080485d3 <main+191>: mov    %esi,0x4(%esp)
0x080485d7 <main+195>: movl   $0x804870c,(%esp)
0x080485de <main+202>: call   0x8048398
0x080485e3 <main+207>: jmp    0x80485f1 <main+221>
0x080485e5 <main+209>: movl   $0x80486f7,(%esp)
0x080485ec <main+216>: call   0x8048368
0x080485f1 <main+221>: lea    0xfffffff4(%ebp),%esp
0x080485f4 <main+224>: pop    %ebx
0x080485f5 <main+225>: pop    %esi
0x080485f6 <main+226>: pop    %edi
0x080485f7 <main+227>: leave
0x080485f8 <main+228>: ret
0x080485f9 <main+229>: nop
0x080485fa <main+230>: nop
0x080485fb <main+231>: nop
End of assembler dump.
(gdb)
[2]+  Stopped                 gdb mgj7_2
(39) thot $ ./mgj7_2
]fS}lNJUMemgj7_2
Sorry! Not correct!
(40) thot $ ./mgj7_2
mgj7_2]fS}lNJUMe
Sorry! Not correct!
(41) thot $ ./mgj7_2
PTRhPmgj7_2
Sorry! Not correct!
(42) thot $ ./mgj7_2
mgj7_2PTRhP
Sorry! Not correct!
(43) thot $ ./mgj7_2
PTRhP
Sorry! Not correct!
(44) thot $ fg 2
gdb mgj7_2
disas
Dump of assembler code for function main:
0x08048514 <main+0>: push   %ebp
0x08048515 <main+1>: mov    %esp,%ebp
0x08048517 <main+3>: push   %edi
0x08048518 <main+4>: push   %esi
0x08048519 <main+5>: push   %ebx
0x0804851a <main+6>: sub    $0x11c,%esp
0x08048520 <main+12>: and    $0xfffffff0,%esp
0x08048523 <main+15>: sub    $0x10,%esp
0x08048526 <main+18>: mov    0x80486ec,%eax
0x0804852b <main+23>: mov    %eax,0xffffffd8(%ebp)
0x0804852e <main+26>: mov    0x80486f0,%eax
0x08048533 <main+31>: mov    %eax,0xffffffdc(%ebp)
0x08048536 <main+34>: movzwl 0x80486f4,%eax
0x0804853d <main+41>: mov    %ax,0xffffffe0(%ebp)
0x08048541 <main+45>: movzbl 0x80486f6,%eax
0x08048548 <main+52>: mov    %al,0xffffffe2(%ebp)
0x0804854b <main+55>: movl   $0x2f,0x4(%esp)
0x08048553 <main+63>: mov    0xc(%ebp),%eax
0x08048556 <main+66>: mov    (%eax),%eax
0x08048558 <main+68>: mov    %eax,(%esp)
0x0804855b <main+71>: call   0x80484cc <r>
0x08048560 <main+76>: mov    %eax,0xfffffef4(%ebp)
0x08048566 <main+82>: mov    0x8049850,%eax
0x0804856b <main+87>: mov    %eax,0x8(%esp)
0x0804856f <main+91>: movl   $0x64,0x4(%esp)
0x08048577 <main+99>: lea    0xffffff68(%ebp),%esi
0x0804857d <main+105>: mov    %esi,(%esp)
0x08048580 <main+108>: call   0x8048378
0x08048585 <main+113>: mov    %esi,(%esp)
0x08048588 <main+116>: call   0x8048490 <c>
0x0804858d <main+121>: mov    %esi,0x4(%esp)
0x08048591 <main+125>: lea    0xfffffef8(%ebp),%ebx
0x08048597 <main+131>: mov    %ebx,(%esp)
0x0804859a <main+134>: call   0x80483a8
0x0804859f <main+139>: mov    %ebx,%edi
0x080485a1 <main+141>: cld
0x080485a2 <main+142>: mov    $0xffffffff,%ecx
0x080485a7 <main+147>: mov    $0x0,%eax
0x080485ac <main+152>: repnz scas %es:(%edi),%al
0x080485ae <main+154>: not    %ecx
0x080485b0 <main+156>: dec    %ecx
0x080485b1 <main+157>: movw   $0x325f,(%ebx,%ecx,1)
0x080485b7 <main+163>: movb   $0x0,0x2(%ebx,%ecx,1)
0x080485bc <main+168>: mov    0xfffffef4(%ebp),%eax
0x080485c2 <main+174>: inc    %eax
0x080485c3 <main+175>: mov    %eax,0x4(%esp)
0x080485c7 <main+179>: mov    %ebx,(%esp)
0x080485ca <main+182>: call   0x8048358
0x080485cf <main+187>: test   %eax,%eax
0x080485d1 <main+189>: jne    0x80485e5 <main+209>
0x080485d3 <main+191>: mov    %esi,0x4(%esp)
0x080485d7 <main+195>: movl   $0x804870c,(%esp)
0x080485de <main+202>: call   0x8048398
0x080485e3 <main+207>: jmp    0x80485f1 <main+221>
0x080485e5 <main+209>: movl   $0x80486f7,(%esp)
0x080485ec <main+216>: call   0x8048368
0x080485f1 <main+221>: lea    0xfffffff4(%ebp),%esp
0x080485f4 <main+224>: pop    %ebx
0x080485f5 <main+225>: pop    %esi
0x080485f6 <main+226>: pop    %edi
0x080485f7 <main+227>: leave
0x080485f8 <main+228>: ret
0x080485f9 <main+229>: nop
0x080485fa <main+230>: nop
0x080485fb <main+231>: nop
End of assembler dump.
(gdb) b *0x080485c7
Breakpoint 5 at 0x80485c7
(gdb) c
Continuing.

Breakpoint 5, 0x080485c7 in main ()
(gdb) x/s (char *)$eax
0xffffd837:  "mgj7_2"
(gdb) x/s (char *)$ebx
0xffffd540:  "testabc_2"
(gdb)
[2]+  Stopped                 gdb mgj7_2
(45) thot $ ./mgj7_2
testabc_2
Sorry! Not correct!
(46) thot $ ./mgj7_2
mgj7
Congratulations!
Unlocked with passphrase mgj7
(47) thot $

# End full console output
# ##################################################